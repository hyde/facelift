
/*
   shadow 20px
   shadow 20px .3
   shadow 20px #c
*/
shadow(size = 10px, color = #0, alpha = 0.25)
   if color is a 'unit'
      box-shadow 0 0 size rgba(#0, color)
   else
      box-shadow 0 0 size rgba(color, alpha)


/*
   background #f                background #f
   background 1*u 10*u          background 1*u 10*u
   background 'foo.jpg'         background url('foo.jpg') 0 0 no-repeat
   background #c 'foo.jpg'      background #ccc url('foo.jpg') 0 0 no-repeat
   background #c 'foo.jpg' 0 1  background: #ccc url("foo.jpg") 0 1
*/
background(arg, rest...)

   len = length(rest)

   if arg is a 'unit'
      background-position arg rest

   else if arg is a 'string'
      if len == 1
         background url(arg) 0 0 no-repeat
      else
         background url(arg) rest

   else if arg is a 'rgba'
      if len == 1
         background arg url(rest) 0 0 no-repeat
      else if len > 1
         url = rest[0]
         background arg url(url) rest[1] rest[2] rest[3]
      else
         background-color arg

   else
      arg rest

/*
   font 24*u
   font 45*u/1em center -2 300
   font 10*u/3*u bold italic #d underline right sans-serif
*/
font()

   for arg, i in arguments

      if arg < 0
         letter-spacing arg
      else if arg >= 300
         font-weight arg
      else if arg is a 'unit' and i == 0
         font-size arg
      else if arg is a 'unit' and i > 0
         line-height arg
      else if arg is a 'rgba'
         color arg
      else if arg is 'bold' or arg is 'normal'
         font-weight arg
      else if arg is 'uppercase' or arg is 'lowercase'
         text-transform arg
      else if arg is 'underline'
         text-decoration arg
      else if arg is 'italic'
         font-style arg
      else if arg is 'left' or arg is 'right' or arg is 'center'
         text-align arg
      else if arg is not '/'
         font-family arg

/*
   Thanks: https://github.com/visionmedia/nib

   absolute 1px               --> position: absolute; top: 1px; left: 1px;
   relative 2px 4px           --> position: relative; top: 1px; left: 4px;
   fixed top 5px right 2px    --> position: fixed; top: 5px; right: 4px;
*/

-pos(type, args)
   position: unquote(type)
   len = length(args)
   arg0 = args[0]

   if len is 1
      top arg0
      left arg0

   else if len is 2
      top arg0
      left args[1]

   else if len is 4
      {arg0}: args[1]
      {args[2]}: args[3]


fixed()
   -pos('fixed', arguments)

absolute()
   -pos('absolute', arguments)

relative()
   -pos('relative', arguments)


hover(color = blue, mouseover = lighten(color, 10), click = darken(mouseover, 10))
   color color
   transition color fast

   &:hover
      color mouseover

   &:active
      color click

